{"version":3,"sources":["../server/server.js"],"names":["app","httpServer","require","createServer","port","process","env","PORT","bodyParser","session","node_env","mysqlDB","sequalizeDB","userModel","inspirationModel","passport","use","json","secret","resave","saveUninitialized","initialize","req","res","next","header","headers","origin","router","Router","status","isAuthenticated","console","log","sessionStore","sessionID","showRequest","userAuthenticated","sendStatus","sync","force","then","listen","emit"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\r\nimport {connectToMysqlDB} from './connectToMysqlDB';\r\nimport {UserModel} from '../models/userModel';\r\nimport {InspirationModel} from '../models/inspiration';\r\nimport {passportStrat} from '../config/passportStrategy';\r\nimport logger from './utils/logger';\r\n\r\n/*** Routes ***/\r\nimport {UserLoginRouter} from './routes/userLoginRouter';\r\nimport {ApiVersionRouter} from './routes/apiVersionRouter';\r\nimport {ProfileRouter} from './routes/profileRouter';\r\nimport {InspirationRouter} from './routes/inspirationRouter';\r\n\r\nexport const app = express();\r\nexport const httpServer = require('http').createServer(app);\r\nconst port = process.env.PORT || 3001;\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\nconst env = process.env.node_env;\r\n\r\n(async function(){\r\n  let mysqlDB = await connectToMysqlDB();\r\n  let userModel = await UserModel(mysqlDB.sequalizeDB);  \r\n  let inspirationModel = await InspirationModel(mysqlDB.sequalizeDB);\r\n  let passport = await passportStrat(userModel);\r\n\r\n  app.use(bodyParser.json());\r\n\r\n  // Passport requirements\r\n  // Not secure must change before production\r\n  app.use(session({ \r\n    secret: 'jk_travelhive',\r\n    resave: false,\r\n    saveUninitialized: false,\r\n  }));\r\n  app.use(passport.initialize());\r\n  app.use(passport.session());\r\n\r\n  app.use(function (req, res, next) {\r\n    res.header('Access-Control-Allow-Credentials', true);\r\n    \r\n    /******* Change below line to restrict to our website origin *********/\r\n    res.header('Access-Control-Allow-Origin', req.headers.origin);    \r\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,PATCH');\r\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n    next();\r\n   });\r\n\r\n  // Router\r\n  const router = express.Router();\r\n\r\n  /*********Debug Logging middleware***********/\r\n  if(env === 'debug'){\r\n    app.use((req, res, next) => {\r\n      const status = req.isAuthenticated() ? 'logged in' : 'logged out';\r\n      console.log(\r\n        'status:', status, '\\n',\r\n        req.sessionStore,\r\n        req.sessionID,\r\n        req.session\r\n      );\r\n      next();\r\n    });\r\n\r\n    let showRequest = (req,res,next) => {\r\n      console.log(req.session);\r\n      next();\r\n    }\r\n  }\r\n  /****************************************** */\r\n\r\n   /*************** Helper middleware *******************/\r\n    const userAuthenticated = (req, res, next) => {\r\n      if (req.isAuthenticated()) {\r\n        return next();\r\n      }\r\n      res.sendStatus(401);\r\n    } \r\n   /****************************************** */\r\n\r\n  /*************** Routes*******************/  \r\n  app.use('/',ApiVersionRouter(router,passport));\r\n  app.use('/',UserLoginRouter(router,passport));\r\n  app.use('/',ProfileRouter(router, passport,userAuthenticated));\r\n  app.use('/',InspirationRouter(router, passport, inspirationModel, userAuthenticated));\r\n  /*****************************************/\r\n      \r\n  // Register all routes with api prefix\r\n  app.use('/api', router);\r\n  \r\n  /* Needed for test otherwise sequelize can't find the database tables */\r\n  if(env === 'test'){\r\n    mysqlDB.sequalizeDB.sync({force: false}).then(function() {      \r\n        httpServer.listen(port, function(){\r\n        console.log('Express api listening on port ' + port );\r\n        app.emit('serverStarted');\r\n      });     \r\n    });\r\n  /**********************************************************************/   \r\n  } else {    \r\n    httpServer.listen(port);\r\n    logger('Api Started','info');    \r\n    console.log('Express api listening on port ' + port );\r\n  }\r\n})()\r\n"]}