{"version":3,"sources":["../server/connectToMysqlDB.js"],"names":["Sequelize","require","mysql","mysqlConnection","createConnection","user","Database","password","port","options","connectToMysqlDB","Promise","resolve","reject","connect","err","console","error","stack","query","name","results","fields","changeUser","database","sequalizeDB","authenticate","then","log","catch"],"mappings":";;;;;;;AAEA;;AACA;;;;AAHA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAIC,QAAQD,QAAQ,OAAR,CAAZ;;;AAIA;AACA;;AAEA,IAAIE,kBAAkBD,MAAME,gBAAN,CAAuB,EAACC,MAAK,eAAOC,QAAP,CAAgBD,IAAtB,EAA2BE,UAAS,eAAOD,QAAP,CAAgBC,QAApD,EAA6DC,MAAK,eAAOF,QAAP,CAAgBG,OAAhB,CAAwBD,IAA1F,EAAvB,CAAtB;;AAEO,IAAIE;AAAA,qEAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,6CACrB,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CV,8BAAgBW,OAAhB,CAAwB,UAASC,GAAT,EAAc;AACpC,oBAAIA,GAAJ,EAAS;AACPC,0BAAQC,KAAR,CAAc,uBAAuBF,IAAIG,KAAzC;AACAL;AACD;AACDV,gCAAgBgB,KAAhB,oCAAuD,eAAOb,QAAP,CAAgBc,IAAvE,EAA+E,UAAUH,KAAV,EAAiBI,OAAjB,EAA0BC,MAA1B,EAAkC;AAC/G,sBAAGL,KAAH,EAAS;AACP,0BAAM,qBAAN;AACD;AACDd,kCAAgBoB,UAAhB,CAA2B,EAACC,UAAS,eAAOlB,QAAP,CAAgBc,IAA1B,EAA3B,EAA4D,UAASL,GAAT,EAAc;AACxE,wBAAIA,GAAJ,EAAS,MAAMA,GAAN;AACV,mBAFD;AAGA;AACA,sBAAIU,cAAc,IAAIzB,SAAJ,CAChB,eAAOM,QAAP,CAAgBc,IADA,EAEhB,eAAOd,QAAP,CAAgBD,IAFA,EAGhB,eAAOC,QAAP,CAAgBC,QAHA,EAIhB,eAAOD,QAAP,CAAgBG,OAJA,CAAlB;;AAOAgB,8BACCC,YADD,GAECC,IAFD,CAEM,YAAM;AACVX,4BAAQY,GAAR,CAAY,+CAAZ;AACAhB,4BAAQ,EAACa,wBAAD,EAAatB,gCAAb,EAAR;AACD,mBALD,EAMC0B,KAND,CAMO,eAAO;AACZb,4BAAQC,KAAR,CAAc,oCAAd,EAAoDF,GAApD;AACD,mBARD;AASD,iBAxBD;AAyBD,eA9BD;AA+BD,aAhCM,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,GAAJ","file":"connectToMysqlDB.js","sourcesContent":["const Sequelize = require('sequelize');\r\nlet mysql = require('mysql');\r\nimport \"babel-polyfill\";\r\nimport {Config} from '../config/config'\r\n\r\n// Database Connection Setup\r\n// must manually create database in mamp with name 'travelhive_user_db'\r\n\r\nvar mysqlConnection = mysql.createConnection({user:Config.Database.user,password:Config.Database.password,port:Config.Database.options.port});\r\n\r\nexport let connectToMysqlDB = async function(){\r\n  return new Promise(function(resolve, reject) {\r\n    mysqlConnection.connect(function(err) {\r\n      if (err) {\r\n        console.error('error connecting: ' + err.stack);\r\n        reject();\r\n      }\r\n      mysqlConnection.query(`CREATE DATABASE IF NOT EXISTS ${Config.Database.name}`, function (error, results, fields) {\r\n        if(error){\r\n          throw 'cant create db name'\r\n        }\r\n        mysqlConnection.changeUser({database:Config.Database.name}, function(err) {\r\n          if (err) throw err;\r\n        });\r\n        //db should exist now, initialize Sequelize\r\n        let sequalizeDB = new Sequelize(\r\n          Config.Database.name,\r\n          Config.Database.user,\r\n          Config.Database.password,\r\n          Config.Database.options\r\n        );\r\n\r\n        sequalizeDB\r\n        .authenticate()\r\n        .then(() => {\r\n          console.log('Connection has been established successfully.');\r\n          resolve({sequalizeDB,mysqlConnection})\r\n        })\r\n        .catch(err => {\r\n          console.error('Unable to connect to the database:', err);\r\n        });\r\n      })\r\n    });\r\n  });\r\n};\r\n"]}