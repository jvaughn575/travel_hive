{"version":3,"sources":["../models/userModel.js"],"names":["env","process","node_env","UserModel","sequalizeDB","User","define","username","type","STRING","email","unique","password","profileImg","BLOB","allowNull","bioText","TEXT","generateHash","hashSync","genSaltSync","validPassword","userPassword","console","log","compareSync","sync","force","then","create"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,MAAMC,QAAQD,GAAR,CAAYE,QAAxB;;AAEA;AACO,IAAIC,gCAAY,SAAZA,SAAY,CAASC,WAAT,EAAqB;AAC1C,MAAMC,OAAOD,YAAYE,MAAZ,CAAmB,MAAnB,EAA0B;AACrCC,cAAU;AACRC,YAAM,oBAAUC;AADR,KAD2B;AAIrCC,WAAO;AACLF,YAAM,oBAAUC,MADX;AAELE,cAAQ;AAFH,KAJ8B;AAQrCC,cAAS;AACPJ,YAAM,oBAAUC;AADT,KAR4B;AAWrCI,gBAAW;AACTL,YAAM,oBAAUM,IADP;AAETC,iBAAW;AAFF,KAX0B;AAerCC,aAAQ;AACNR,YAAM,oBAAUS,IADV;AAENF,iBAAW;AAFL;AAf6B,GAA1B,CAAb;;AAqBA;AACAV,OAAKa,YAAL,GAAoB,UAACN,QAAD,EAAc;AAChC,WAAO,uBAAOO,QAAP,CAAgBP,QAAhB,EAA0B,uBAAOQ,WAAP,CAAmB,CAAnB,CAA1B,EAAiD,IAAjD,CAAP;AACD,GAFD;;AAIA;AACAf,OAAKgB,aAAL,GAAqB,UAACT,QAAD,EAAUU,YAAV,EAA2B;AAC9CC,YAAQC,GAAR,CAAY,qBAAZ,EAAmCF,YAAnC;AACA,WAAO,uBAAOG,WAAP,CAAmBb,QAAnB,EAA6BU,YAA7B,CAAP;AACD,GAHD;;AAKA;AACA,MAAItB,QAAQ,MAAZ,EAAmB;AACjBK,SAAKqB,IAAL,CAAU,EAACC,OAAM,IAAP,EAAV,EAAwBC,IAAxB,CAA6B,YAAM;AACjC;AACC,aAAOvB,KAAKwB,MAAL,CAAY;AAClBtB,kBAAU,gBADQ;AAElBG,eAAO,+BAFW;AAGlBE,kBAAUP,KAAKa,YAAL,CAAkB,cAAlB,CAHQ;AAIlBL,oBAAY,IAJM;AAKlBG,iBAAS;AALS,OAAZ,CAAP;AAOF,KATD;AAUD,GAXD,MAWO;AACLX,SAAKqB,IAAL,CAAU,EAACC,OAAM,KAAP,EAAV,EAAyBC,IAAzB,CAA8B,YAAM,CAEnC,CAFD;AAGD;;AAED,SAAOvB,IAAP;AACD,CApDM","file":"userModel.js","sourcesContent":["import Sequelize from 'sequelize';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst env = process.env.node_env;\r\n\r\n// Model definition\r\nexport let UserModel = function(sequalizeDB){\r\n  const User = sequalizeDB.define('user',{\r\n    username: {\r\n      type: Sequelize.STRING\r\n    },\r\n    email: {\r\n      type: Sequelize.STRING,\r\n      unique: true,\r\n    },\r\n    password:{ \r\n      type: Sequelize.STRING,\r\n    },\r\n    profileImg:{\r\n      type: Sequelize.BLOB,\r\n      allowNull: true,\r\n    },\r\n    bioText:{\r\n      type: Sequelize.TEXT,\r\n      allowNull: true,\r\n    }\r\n  });  \r\n\r\n  // user password encryption\r\n  User.generateHash = (password) => {\r\n    return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);\r\n  };\r\n\r\n  // verify if password is correct\r\n  User.validPassword = (password,userPassword) => {\r\n    console.log(\"Validating Password\", userPassword);\r\n    return bcrypt.compareSync(password, userPassword);\r\n  };\r\n\r\n  // Some mock data. If user table exist 'force' equals true will drop it first\r\n  if( env === 'test'){\r\n    User.sync({force:true}).then(() => {\r\n      // Table created\r\n       return User.create({\r\n        username: \"Jilian Carlile\",\r\n        email: \"jillian.carlile@fakeEmail.com\",\r\n        password: User.generateHash(\"1234password\"),\r\n        profileImg: null,\r\n        bioText: null,\r\n      }); \r\n    });\r\n  } else {\r\n    User.sync({force:false}).then(() => {\r\n      \r\n    });\r\n  } \r\n \r\n  return User\r\n}"]}